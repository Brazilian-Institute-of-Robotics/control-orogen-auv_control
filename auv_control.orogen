name "auv_control"
# Optionally declare the version number
version "0.1"

# If new data types need to be defined, they have to be put in a separate C++
# header, and this header will be loaded here
# import_types_from "auv_controlType.hpp"

# If the component/deployments use data types that are defined in other oroGen
# projects, these projects should be imported there as well.
import_types_from "base"
import_types_from "6dControl.hpp"
using_library "motor_controller"


# Declare a new task context (i.e., a component)
#
# The corresponding C++ class can be edited in tasks/Task.hpp and
# tasks/Task.cpp, and will be put in the auv_control namespace.
task_context "Base" do
    property("expected_inputs", "auv_control::ExpectedInputs")
    property("timeout_cascade", "double", 1)
    property("timeout_cmd_in", "double", 1)
    
    input_port('cascade', 'base::LinearAngular6DCommand')
    input_port("cmd_in", "base::LinearAngular6DCommand")
    input_port("pose_sample", "base::samples::RigidBodyState")

    periodic(0.01)
    #port_driven "cascade"
    #port_driven "cmd_in"
    output_port("cmd_out", "base::LinearAngular6DCommand")

    operation("addCommandInput").
        argument("name", "string").
        argument("timeout", "double")
    dynamic_input_port(/cmd_\w+/, "base::LinearAngular6DCommand")    

    runtime_states :POSE_SAMPLE_MISSING, :INPUT_MISSING, :WAIT_FOR_INPUT
    error_states :INPUT_COLLIDING, :INPUT_UNEXPECTED, :TIMEOUT

end

task_context "AUVForceTorqueController" do
    input_port('cascade', "base::LinearAngular6DCommand")
    input_port("pose_sample", "base::samples::RigidBodyState")
    port_driven "cascade"    
    #periodic(0.01)

    output_port("motor_command", "base::actuators::Command")

    property("calibration", "base::MatrixXd")
    property("cut_off", "std::vector<double>")

end

task_context "AUVAlignedVelocityController" do
    subclasses "Base"
    property("pid_settings", "base::LinearAngular6DPIDSettings")
    output_port("avg_periode", "base::LinearAngular6DCommand")
end

task_context "AUVAlignedController" do
    subclasses "Base"
    output_port("avg_periode", "base::LinearAngular6DCommand")
    property("pid_settings", "base::LinearAngular6DPIDSettings")
end

task_context "AUVOptimalOrientationController" do
    subclasses "Base"
    property("opt_orientation_distance", "double")
    property("opt_orientation", "base::Vector3d")
end

task_context "AUVWorldController" do
    subclasses "Base"
    input_port("opt_orientation_distance", "double")
    input_port("opt_orientation", "base::Vector3d")
end

task_context "AUVRelativeController" do
    subclasses "Base"
end

task_context "AUVWaypointNavigator" do
    input_port("trajectory", "std::vector<base::LinearAngular6DWaypoint").
        doc("Input Trajectory the auv should follow")
    
    input_port("pose_sample", "base::samples::RigidBodyState").
        doc("current pose retrieved from any localization")

    output_port("cmd_out", "base::LinearAngular6DCommand").
        doc("command for AUVWorldController")
    
    output_port("current_delta", "base::LinearAngular6DCommand").
        doc("shows error between current and desired waypoint for debugging")

    output_port("current_waypoint", "base::LinearAngular6DWaypoint").
        doc("current waypoint that is navigated by this controller")

    output_port("queue_size", "int").
        doc("remaining waypoints to follow")

    property("timeout", "double", 30).
        doc("The navigator is going into fatal if no pose_samples are incoming")

    runtime_states :WAIT_FOR_WAYPOINTS, :KEEP_WAYPOINT, :FOLLOWING_WAYPOINTS, :POSE_SAMPLE_MISSING
    periodic(0.01)
end
